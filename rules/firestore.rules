rules_version = '2';
service cloud.firestore {

  match /databases/{database}/documents {
    	
  	// Check if the requesting user is signed in
    function authenticated() {
  		return request.auth != null && request.auth.uid != null;
		}
    
    // Check if the specified userId corresponds the requesting user
    function itsMe(userId) {
  		return authenticated() && request.auth.uid == userId;
		}
    
    // Checks the current authenticated user's token claims for role-based priviledges
    function itsRole(role) {
    	return authenticated() && request.auth.token[role] == true;
    }
    
    // Shared content from every collection
    match /{path=**}/feed/{post} {
    
    	// Allows listing public posts for everyone
    	allow list: if 'public' in resource.data.tags;
    }

  	// User profiles.
  	match /users/{userId} {
    
    	// Allows everyone to read user data   
      allow read;
      
      // Allows every signed-in user to create a new profile
      allow create: if authenticated();
      
    	// Allows only the user herself to update or delete the profile  
      allow update, delete: if itsMe(userId) || itsRole("admin");
      
      // User's shared content
    	match /feed/{post} {
      
      	// Allow reading user's posts for everyone
      	allow read;
      
        // Allows only the author to write
        allow write: if itsMe(userId);
        
        // Post likes.
        match /likes/{shard} {
        
        	// Allows everyone to read post's likes
        	allow read;

          // Allows signed-in users to like other's posts
          allow create, update: if authenticated();

          // Only the owner is allowed to delete it (deleting the post)
          allow delete: if itsMe(userId);
        }

        // Post's likers collection.
        match /likers/{likerId} {
        
        	// Allows everyone to read post's likedBy 
        	allow read;

          // Allows signed-in users to like other's posts
          allow create, update: if authenticated();

          // Only the owner is allowed to unlike it (deleting itelf from likers)
          allow delete: if itsMe(likerId);
        }
			}
    }
    
    // Conversations (group of users messaging).
    match /conversations/{convId} {
    
    	// Allow every signed-in user to create new conversations
    	allow create: if authenticated();
      
      // Allow read/list of conversations only by recipients
    	allow read: if request.auth.uid in resource.data.recipients;
      
      // Allow delete/modify only by the conversation's owner (first recipient)
      allow update, delete: if itsMe(resource.data.recipients[0]);
      
      // Messages.
      match /messages/{messageId} {
      
      	// Returns the parent's recipients array
      	function recipients() {
        	// Uses a variable to make sure the following 'in' clause will work 
        	let conv = get(/databases/$(database)/documents/conversations/$(convId));  
          return conv.data.recipients;
        }
        
        // True whenever the requesting user is listed among the recipients
        function amongRecipients() {
        	// Skips to get the collection if not authenticated
        	return authenticated() && (request.auth.uid in recipients());
        }
        
				// Allows reading/creating users listed in the parents recipients array 
      	allow read, create: if amongRecipients();
        
        // Allows only the sender to update and delete a message 
        allow update, delete: if itsMe(resource.data.sender);
      }
		}
  }
}